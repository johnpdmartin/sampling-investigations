points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
# # print(output)
# # write.csv(output,file=paste("./",
# #                             sampsize,"_",filename,".csv"))
# #
# #
# # output[2,]
library(quantreg)
#example(rq)
data(engel)
n_samp <- length(engel$income)
method_df <- "org_scale" # "perc_scale" # "org_scale" #
t_adj <- abs(qt(.025,n_samp))
wgt_filereg <- rep(1,n_samp)
taus_set <- seq(.01,.99,length.out=99)
x_sample <- log10(engel$income)
y_sample <- log10(engel$foodexp)
med_est_x <- rq((x_sample)~(1),tau=.5,weights=wgt_filereg)
med_pt_est_x <- med_est_x$coefficients[1]
for (i in 1:length(taus_set)) {
#taus <- .05
taus <- taus_set[i]
if(method_df == "perc_scale") {
q_var <- sqrt(taus*(1-taus)/(n_samp-2))} else
{q_var <- sqrt(taus*(1-taus)/(n_samp))}
p_low <- qnorm(0.025,taus,q_var)
p_high <- qnorm(0.975,taus,q_var)
p_low <- max(p_low,0.0001)
p_high <- min(p_high,0.9999)
if(method_df == "perc_scale")  {
b_low <- qbinom(.025,sampsize-2,taus)/(sampsize-2)
b_high <- qbinom(.975,sampsize-2,taus)/(sampsize-2)}
else  {b_low <- qbinom(.025,sampsize,taus)/(sampsize)
b_high <- qbinom(.975,sampsize,taus)/(sampsize)}
print("binomial CI | evd CI  , in percentile scale")
print("lower bounds")
print(paste(b_low,p_low))
print("upper bounds")
print(paste(b_high,p_high))
model_fit_rq <- rq((y_sample)~(x_sample),tau=taus,weights=wgt_filereg)
model_fit_rq
rqr_beta0 <- model_fit_rq$coefficients[1]
rqr_beta1 <- model_fit_rq$coefficients[2]
std_errors <- summary(model_fit_rq,se="boot",R=600)$coefficients[c(3:4)]
beta1_std <- std_errors[2]
beta0_std <- std_errors[1]
samp <- y_sample-(rqr_beta0+rqr_beta1*x_sample)
samp_var <- var(samp)
y_var <- var(y_sample)
rho <- function(u,taur=.5) u*(taur - (u < 0))
samp_r1 <- 1 - model_fit_rq$rho/rq(y_sample~1,tau=taus,weights=wgt_filereg)$rho
model_fit <- rq((samp)~(1),tau=taus,method="fn",weights=wgt_filereg)
qr_dat <- c(summary(model_fit)$coefficients[1])
qrboot_dat  <- c(summary(model_fit,se="boot",R=600)$coefficients[1:4])
back_pts1 <- rq((samp)~(1),tau=p_low,weights=wgt_filereg)$coefficients[1]
back_pts2 <- rq((samp)~(1),tau=p_high,weights=wgt_filereg)$coefficients[1]
back_pts3 <- rq((samp)~(1),tau=b_low,weights=wgt_filereg)$coefficients[1]
back_pts4 <- rq((samp)~(1),tau=b_high,weights=wgt_filereg)$coefficients[1]
bk_pt <- c(back_pts1,back_pts2,back_pts3,back_pts4)
print(bk_pt)
#   s2x1x2 <- sum(x_sample*x_sample2)-sum(x_sample)*sum(x_sample2)/n_samp
s2x1 <- sum(x_sample^2)-sum(x_sample)^2/n_samp
#   s2x2 <- sum(x_sample2^2)-sum(x_sample2)^2/n_samp
#    r12 <- s2x1x2/sqrt(s2x1*s2x2)
r12 <- 0
if(method_df == "perc_scale")   {se1adj <- sqrt((s2x1)*(1-r12)/n_samp)}   else   {se1adj <- sqrt((s2x1)*(1-r12)/(1/(n_samp-2)))/n_samp}
#     se2adj <- sqrt((s2x2)*(1-r12)/n_samp)}
#    se2adj <- sqrt((s2x2)*(1-r12)/(1/(n_samp-3)))/n_samp}
boot_low[i] <- rqr_beta1-t_adj*beta1_std
boot_high[i] <- rqr_beta1+t_adj*beta1_std
evd_low[i] <- rqr_beta1+bk_pt[1]/se1adj
evd_high[i] <- rqr_beta1+bk_pt[2]/se1adj
evd_ci <- max(abs(bk_pt[1]),abs(bk_pt[2]))
evd_symm_low[i] <- rqr_beta1-evd_ci/se1adj
evd_symm_high[i] <- rqr_beta1+evd_ci/se1adj
bin_ci <- max(abs(bk_pt[3]),abs(bk_pt[4]))
bin_low[i] <- rqr_beta1-bin_ci/se1adj
bin_high[i] <- rqr_beta1+bin_ci/se1adj
#     boot_low2 <- rqr_beta2-t_adj*beta2_std
#     boot_high2 <- rqr_beta2+t_adj*beta2_std
#     evd_low2 <- rqr_beta2+bk_pt[1]/se2adj
#     evd_high2 <- rqr_beta2+bk_pt[2]/se2adj
#     evd_symm_low2 <- rqr_beta2-evd_ci/se2adj
#     evd_symm_high2 <- rqr_beta2+evd_ci/se2adj
#     bin_low2 <- rqr_beta2-bin_ci/se2adj
#     bin_high2 <- rqr_beta2+bin_ci/se2adj
samp_low <- min(samp)
samp_high <- max(samp)
pt_est <- qr_dat
pt_est_b1[i] <- rqr_beta1
pt_est_b0[i] <- rqr_beta0
if(method_df == "perc_scale")   {denxvar2 <- sqrt(1+(med_pt_est_x)^2/(se1adj)^2)}     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+(med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
#     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+
#                                (med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
denxevd2 <- denxvar2
denxbin2 <- denxvar2
boot_y0_low[i] <- rqr_beta0-t_adj*beta0_std
boot_y0_high[i] <- rqr_beta0+t_adj*beta0_std
evd_y0_low[i] <- rqr_beta0+bk_pt[1]*denxevd2
evd_y0_high[i] <- rqr_beta0+bk_pt[2]*denxevd2
evd_symm_y0_low[i] <- rqr_beta0-evd_ci*denxevd2
evd_symm_y0_high[i] <- rqr_beta0+evd_ci*denxevd2
bin_y0_low[i] <- rqr_beta0-bin_ci*denxbin2
bin_y0_high[i] <- rqr_beta0+bin_ci*denxbin2
if(method_df == "perc_scale") {samp_var_theta <- (bin_ci/t_adj)^2} else {samp_var_theta <- (bin_ci/t_adj)^2*n_samp/(n_samp-2)}
mea_lm <- summary(lm(y_sample~x_sample))$r.squared
rsq <- 1- samp_var/y_var
samp_r1
print(paste(boot_low[i],boot_high[i]))
print(paste(evd_low[i],evd_high[i] ))
print(paste(evd_symm_low[i],evd_symm_high[i]))
print(paste(bin_low[i],bin_high[i]))
pt_est
print(paste(pt_est_b1[i],pt_est_b0[i]))
med_pt_est_x
print(paste(boot_y0_low[i],boot_y0_high[i]))
print(paste(evd_y0_low[i],evd_y0_high[i]))
print(paste(evd_symm_y0_low[i],evd_symm_y0_high[i]))
print(paste(bin_y0_low[i],bin_y0_high[i]))
}
plot(y=pt_est_b1,x=taus_set,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
plot(y=pt_est_b0,x=taus_set,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
# # print(output)
# # write.csv(output,file=paste("./",
# #                             sampsize,"_",filename,".csv"))
# #
# #
# # output[2,]
library(quantreg)
#example(rq)
data(engel)
n_samp <- length(engel$income)
method_df <- "org_scale" # "perc_scale" # "org_scale" #
t_adj <- abs(qt(.025,n_samp))
wgt_filereg <- rep(1,n_samp)
taus_set <- seq(.01,.99,length.out=99)
# x_sample <- log10(engel$income)
# y_sample <- log10(engel$foodexp)
x_sample <- engel$income
y_sample <- engel$foodexp
med_est_x <- rq((x_sample)~(1),tau=.5,weights=wgt_filereg)
med_pt_est_x <- med_est_x$coefficients[1]
for (i in 1:length(taus_set)) {
#taus <- .05
taus <- taus_set[i]
if(method_df == "perc_scale") {
q_var <- sqrt(taus*(1-taus)/(n_samp-2))} else
{q_var <- sqrt(taus*(1-taus)/(n_samp))}
p_low <- qnorm(0.025,taus,q_var)
p_high <- qnorm(0.975,taus,q_var)
p_low <- max(p_low,0.0001)
p_high <- min(p_high,0.9999)
if(method_df == "perc_scale")  {
b_low <- qbinom(.025,sampsize-2,taus)/(sampsize-2)
b_high <- qbinom(.975,sampsize-2,taus)/(sampsize-2)}
else  {b_low <- qbinom(.025,sampsize,taus)/(sampsize)
b_high <- qbinom(.975,sampsize,taus)/(sampsize)}
print("binomial CI | evd CI  , in percentile scale")
print("lower bounds")
print(paste(b_low,p_low))
print("upper bounds")
print(paste(b_high,p_high))
model_fit_rq <- rq((y_sample)~(x_sample),tau=taus,weights=wgt_filereg)
model_fit_rq
rqr_beta0 <- model_fit_rq$coefficients[1]
rqr_beta1 <- model_fit_rq$coefficients[2]
std_errors <- summary(model_fit_rq,se="boot",R=600)$coefficients[c(3:4)]
beta1_std <- std_errors[2]
beta0_std <- std_errors[1]
samp <- y_sample-(rqr_beta0+rqr_beta1*x_sample)
samp_var <- var(samp)
y_var <- var(y_sample)
rho <- function(u,taur=.5) u*(taur - (u < 0))
samp_r1 <- 1 - model_fit_rq$rho/rq(y_sample~1,tau=taus,weights=wgt_filereg)$rho
model_fit <- rq((samp)~(1),tau=taus,method="fn",weights=wgt_filereg)
qr_dat <- c(summary(model_fit)$coefficients[1])
qrboot_dat  <- c(summary(model_fit,se="boot",R=600)$coefficients[1:4])
back_pts1 <- rq((samp)~(1),tau=p_low,weights=wgt_filereg)$coefficients[1]
back_pts2 <- rq((samp)~(1),tau=p_high,weights=wgt_filereg)$coefficients[1]
back_pts3 <- rq((samp)~(1),tau=b_low,weights=wgt_filereg)$coefficients[1]
back_pts4 <- rq((samp)~(1),tau=b_high,weights=wgt_filereg)$coefficients[1]
bk_pt <- c(back_pts1,back_pts2,back_pts3,back_pts4)
print(bk_pt)
#   s2x1x2 <- sum(x_sample*x_sample2)-sum(x_sample)*sum(x_sample2)/n_samp
s2x1 <- sum(x_sample^2)-sum(x_sample)^2/n_samp
#   s2x2 <- sum(x_sample2^2)-sum(x_sample2)^2/n_samp
#    r12 <- s2x1x2/sqrt(s2x1*s2x2)
r12 <- 0
if(method_df == "perc_scale")   {se1adj <- sqrt((s2x1)*(1-r12)/n_samp)}   else   {se1adj <- sqrt((s2x1)*(1-r12)/(1/(n_samp-2)))/n_samp}
#     se2adj <- sqrt((s2x2)*(1-r12)/n_samp)}
#    se2adj <- sqrt((s2x2)*(1-r12)/(1/(n_samp-3)))/n_samp}
boot_low[i] <- rqr_beta1-t_adj*beta1_std
boot_high[i] <- rqr_beta1+t_adj*beta1_std
evd_low[i] <- rqr_beta1+bk_pt[1]/se1adj
evd_high[i] <- rqr_beta1+bk_pt[2]/se1adj
evd_ci <- max(abs(bk_pt[1]),abs(bk_pt[2]))
evd_symm_low[i] <- rqr_beta1-evd_ci/se1adj
evd_symm_high[i] <- rqr_beta1+evd_ci/se1adj
bin_ci <- max(abs(bk_pt[3]),abs(bk_pt[4]))
bin_low[i] <- rqr_beta1-bin_ci/se1adj
bin_high[i] <- rqr_beta1+bin_ci/se1adj
#     boot_low2 <- rqr_beta2-t_adj*beta2_std
#     boot_high2 <- rqr_beta2+t_adj*beta2_std
#     evd_low2 <- rqr_beta2+bk_pt[1]/se2adj
#     evd_high2 <- rqr_beta2+bk_pt[2]/se2adj
#     evd_symm_low2 <- rqr_beta2-evd_ci/se2adj
#     evd_symm_high2 <- rqr_beta2+evd_ci/se2adj
#     bin_low2 <- rqr_beta2-bin_ci/se2adj
#     bin_high2 <- rqr_beta2+bin_ci/se2adj
samp_low <- min(samp)
samp_high <- max(samp)
pt_est <- qr_dat
pt_est_b1[i] <- rqr_beta1
pt_est_b0[i] <- rqr_beta0
if(method_df == "perc_scale")   {denxvar2 <- sqrt(1+(med_pt_est_x)^2/(se1adj)^2)}     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+(med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
#     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+
#                                (med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
denxevd2 <- denxvar2
denxbin2 <- denxvar2
boot_y0_low[i] <- rqr_beta0-t_adj*beta0_std
boot_y0_high[i] <- rqr_beta0+t_adj*beta0_std
evd_y0_low[i] <- rqr_beta0+bk_pt[1]*denxevd2
evd_y0_high[i] <- rqr_beta0+bk_pt[2]*denxevd2
evd_symm_y0_low[i] <- rqr_beta0-evd_ci*denxevd2
evd_symm_y0_high[i] <- rqr_beta0+evd_ci*denxevd2
bin_y0_low[i] <- rqr_beta0-bin_ci*denxbin2
bin_y0_high[i] <- rqr_beta0+bin_ci*denxbin2
if(method_df == "perc_scale") {samp_var_theta <- (bin_ci/t_adj)^2} else {samp_var_theta <- (bin_ci/t_adj)^2*n_samp/(n_samp-2)}
mea_lm <- summary(lm(y_sample~x_sample))$r.squared
rsq <- 1- samp_var/y_var
samp_r1
print(paste(boot_low[i],boot_high[i]))
print(paste(evd_low[i],evd_high[i] ))
print(paste(evd_symm_low[i],evd_symm_high[i]))
print(paste(bin_low[i],bin_high[i]))
pt_est
print(paste(pt_est_b1[i],pt_est_b0[i]))
med_pt_est_x
print(paste(boot_y0_low[i],boot_y0_high[i]))
print(paste(evd_y0_low[i],evd_y0_high[i]))
print(paste(evd_symm_y0_low[i],evd_symm_y0_high[i]))
print(paste(bin_y0_low[i],bin_y0_high[i]))
}
plot(y=pt_est_b1,x=taus_set,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
plot(y=pt_est_b0,x=taus_set,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
# # print(output)
# # write.csv(output,file=paste("./",
# #                             sampsize,"_",filename,".csv"))
# #
# #
# # output[2,]
plot(y=pt_est_b1,x=taus_set)#,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
plot(y=pt_est_b0,x=taus_set)#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
plot(y=pt_est_b1,x=taus_set,ylim=c(0,1))#,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
plot(y=pt_est_b0,x=taus_set,ylim=c(30,150))#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
plot(y=pt_est_b0,x=taus_set,ylim=c(0,180))#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
example(rq)
par(mfrow=c(2,1))
plot(y=pt_est_b1,x=taus_set,ylim=c(0.3,9))#,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
plot(y=pt_est_b0,x=taus_set,ylim=c(20,160))#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
par(mfrow=c(2,1))
plot(y=pt_est_b0,x=taus_set,ylim=c(20,160))#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
plot(y=pt_est_b1,x=taus_set,ylim=c(0.3,.9))#,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
?rq
?summary.rq
std_errors <- summary(model_fit_rq,se="rank")$coefficients[c(3:4)]
std_errors
summary(model_fit_rq,se="rank")
library(quantreg)
#example(rq)
data(engel)
n_samp <- length(engel$income)
method_df <- "org_scale" # "perc_scale" # "org_scale" #
t_adj <- abs(qt(.025,n_samp))
wgt_filereg <- rep(1,n_samp)
taus_set <- seq(.01,.99,length.out=99)
# x_sample <- log10(engel$income)
# y_sample <- log10(engel$foodexp)
x_sample <- engel$income
y_sample <- engel$foodexp
med_est_x <- rq((x_sample)~(1),tau=.5,weights=wgt_filereg)
med_pt_est_x <- med_est_x$coefficients[1]
for (i in 1:length(taus_set)) {
#taus <- .05
taus <- taus_set[i]
if(method_df == "perc_scale") {
q_var <- sqrt(taus*(1-taus)/(n_samp-2))} else
{q_var <- sqrt(taus*(1-taus)/(n_samp))}
p_low <- qnorm(0.025,taus,q_var)
p_high <- qnorm(0.975,taus,q_var)
p_low <- max(p_low,0.0001)
p_high <- min(p_high,0.9999)
if(method_df == "perc_scale")  {
b_low <- qbinom(.025,sampsize-2,taus)/(sampsize-2)
b_high <- qbinom(.975,sampsize-2,taus)/(sampsize-2)}
else  {b_low <- qbinom(.025,sampsize,taus)/(sampsize)
b_high <- qbinom(.975,sampsize,taus)/(sampsize)}
print("binomial CI | evd CI  , in percentile scale")
print("lower bounds")
print(paste(b_low,p_low))
print("upper bounds")
print(paste(b_high,p_high))
model_fit_rq <- rq((y_sample)~(x_sample),tau=taus,weights=wgt_filereg)
model_fit_rq
rqr_beta0 <- model_fit_rq$coefficients[1]
rqr_beta1 <- model_fit_rq$coefficients[2]
#  std_errors <- summary(model_fit_rq,se="boot",R=600)$coefficients[c(3:4)]
std_errors <- summary(model_fit_rq,se="rank")$coefficients[c(3:6)]
#     beta1_std <- std_errors[2]
#     beta0_std <- std_errors[1]
beta1_rlb <- std_errors[2]
beta0_rlb <- std_errors[1]
beta1_rub <- std_errors[4]
beta0_rub <- std_errors[3]
y_var <- var(y_sample)
rho <- function(u,taur=.5) u*(taur - (u < 0))
samp_r1 <- 1 - model_fit_rq$rho/rq(y_sample~1,tau=taus,weights=wgt_filereg)$rho
model_fit <- rq((samp)~(1),tau=taus,method="fn",weights=wgt_filereg)
qr_dat <- c(summary(model_fit)$coefficients[1])
qrboot_dat  <- c(summary(model_fit,se="boot",R=600)$coefficients[1:4])
back_pts1 <- rq((samp)~(1),tau=p_low,weights=wgt_filereg)$coefficients[1]
back_pts2 <- rq((samp)~(1),tau=p_high,weights=wgt_filereg)$coefficients[1]
back_pts3 <- rq((samp)~(1),tau=b_low,weights=wgt_filereg)$coefficients[1]
back_pts4 <- rq((samp)~(1),tau=b_high,weights=wgt_filereg)$coefficients[1]
bk_pt <- c(back_pts1,back_pts2,back_pts3,back_pts4)
print(bk_pt)
#   s2x1x2 <- sum(x_sample*x_sample2)-sum(x_sample)*sum(x_sample2)/n_samp
s2x1 <- sum(x_sample^2)-sum(x_sample)^2/n_samp
#   s2x2 <- sum(x_sample2^2)-sum(x_sample2)^2/n_samp
#    r12 <- s2x1x2/sqrt(s2x1*s2x2)
r12 <- 0
if(method_df == "perc_scale")   {se1adj <- sqrt((s2x1)*(1-r12)/n_samp)}   else   {se1adj <- sqrt((s2x1)*(1-r12)/(1/(n_samp-2)))/n_samp}
#     se2adj <- sqrt((s2x2)*(1-r12)/n_samp)}
#    se2adj <- sqrt((s2x2)*(1-r12)/(1/(n_samp-3)))/n_samp}
#     boot_low[i] <- rqr_beta1-t_adj*beta1_std
#     boot_high[i] <- rqr_beta1+t_adj*beta1_std
boot_low[i] <- beta1_rlb
boot_high[i] <- beta1_rub
evd_low[i] <- rqr_beta1+bk_pt[1]/se1adj
evd_high[i] <- rqr_beta1+bk_pt[2]/se1adj
evd_ci <- max(abs(bk_pt[1]),abs(bk_pt[2]))
evd_symm_low[i] <- rqr_beta1-evd_ci/se1adj
evd_symm_high[i] <- rqr_beta1+evd_ci/se1adj
bin_ci <- max(abs(bk_pt[3]),abs(bk_pt[4]))
bin_low[i] <- rqr_beta1-bin_ci/se1adj
bin_high[i] <- rqr_beta1+bin_ci/se1adj
#     boot_low2 <- rqr_beta2-t_adj*beta2_std
#     boot_high2 <- rqr_beta2+t_adj*beta2_std
#     evd_low2 <- rqr_beta2+bk_pt[1]/se2adj
#     evd_high2 <- rqr_beta2+bk_pt[2]/se2adj
#     evd_symm_low2 <- rqr_beta2-evd_ci/se2adj
#     evd_symm_high2 <- rqr_beta2+evd_ci/se2adj
#     bin_low2 <- rqr_beta2-bin_ci/se2adj
#     bin_high2 <- rqr_beta2+bin_ci/se2adj
samp_low <- min(samp)
samp_high <- max(samp)
pt_est <- qr_dat
pt_est_b1[i] <- rqr_beta1
pt_est_b0[i] <- rqr_beta0
if(method_df == "perc_scale")   {denxvar2 <- sqrt(1+(med_pt_est_x)^2/(se1adj)^2)}     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+(med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
#     else   {denxvar2 <- sqrt(n_samp/(n_samp-2)+
#                                (med_pt_est_x)^2/(se1adj)^2)}
# +
#                         (med_pt_est_x2)^2/(se2adj)^2)}
denxevd2 <- denxvar2
denxbin2 <- denxvar2
#     boot_y0_low[i] <- rqr_beta0-t_adj*beta0_std
#     boot_y0_high[i] <- rqr_beta0+t_adj*beta0_std
boot_y0_low[i] <- beta0_rlb
boot_y0_high[i] <- beta0_rub
evd_y0_low[i] <- rqr_beta0+bk_pt[1]*denxevd2
evd_y0_high[i] <- rqr_beta0+bk_pt[2]*denxevd2
evd_symm_y0_low[i] <- rqr_beta0-evd_ci*denxevd2
evd_symm_y0_high[i] <- rqr_beta0+evd_ci*denxevd2
bin_y0_low[i] <- rqr_beta0-bin_ci*denxbin2
bin_y0_high[i] <- rqr_beta0+bin_ci*denxbin2
if(method_df == "perc_scale") {samp_var_theta <- (bin_ci/t_adj)^2} else {samp_var_theta <- (bin_ci/t_adj)^2*n_samp/(n_samp-2)}
mea_lm <- summary(lm(y_sample~x_sample))$r.squared
rsq <- 1- samp_var/y_var
samp_r1
print(paste(boot_low[i],boot_high[i]))
print(paste(evd_low[i],evd_high[i] ))
print(paste(evd_symm_low[i],evd_symm_high[i]))
print(paste(bin_low[i],bin_high[i]))
pt_est
print(paste(pt_est_b1[i],pt_est_b0[i]))
med_pt_est_x
print(paste(boot_y0_low[i],boot_y0_high[i]))
print(paste(evd_y0_low[i],evd_y0_high[i]))
print(paste(evd_symm_y0_low[i],evd_symm_y0_high[i]))
print(paste(bin_y0_low[i],bin_y0_high[i]))
}
par(mfrow=c(2,1))
plot(y=pt_est_b0,x=taus_set,ylim=c(20,160))#,ylim=c(-1,1))
points(y=boot_y0_low,x=taus_set,col="blue")
points(y=boot_y0_high,x=taus_set,col="blue")
points(y=evd_symm_y0_low,x=taus_set,col="red",type="b")
points(y=evd_symm_y0_high,x=taus_set,col="red",type="b")
points(y=bin_y0_low,x=taus_set,col="green")
points(y=bin_y0_high,x=taus_set,col="green")
plot(y=pt_est_b1,x=taus_set,ylim=c(0.3,.9))#,ylim=c(.2,1.6))
points(y=boot_low,x=taus_set,col="blue")
points(y=boot_high,x=taus_set,col="blue")
points(y=evd_symm_low,x=taus_set,col="red",type="b")
points(y=evd_symm_high,x=taus_set,col="red",type="b")
points(y=bin_low,x=taus_set,col="green")
points(y=bin_high,x=taus_set,col="green")
pt_est_b1
# # print(output)
# # write.csv(output,file=paste("./",
# #                             sampsize,"_",filename,".csv"))
# #
# #
# # output[2,]
